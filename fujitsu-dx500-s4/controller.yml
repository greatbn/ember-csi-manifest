apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-controller-sa
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-controller-cr
rules:
  # Allow managing ember resources
  - apiGroups: ['ember-csi.io']
    resources: ['*']
    verbs: ['*']
  # Allow listing and creating CRDs
  - apiGroups: ['apiextensions.k8s.io']
    resources: ['customresourcedefinitions']
    verbs: ['list', 'create']
  - apiGroups: ['']
    resources: ['persistentvolumes']
    verbs: ['create', 'delete', 'get', 'list', 'watch', 'update', 'patch']
  - apiGroups: ['']
    resources: ['secrets']
    verbs: ['get', 'list']
  - apiGroups: ['']
    resources: ['persistentvolumeclaims']
    verbs: ['get', 'list', 'watch', 'update']
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: ['']
    resources: ['nodes']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['storage.k8s.io']
    resources: ['volumeattachments']
    verbs: ['get', 'list', 'watch', 'update', 'patch']
  - apiGroups: ['storage.k8s.io']
    resources: ['storageclasses']
    verbs: ['get', 'list', 'watch']
  - apiGroups: ['csi.storage.k8s.io']
    resources: ['csidrivers']
    verbs: ['get', 'list', 'watch', 'update', 'create']
  - apiGroups: ['']
    resources: ['events']
    verbs: ['list', 'watch', 'create', 'update', 'patch']
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-controller-rb
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: csi-controller-cr
subjects:
- kind: ServiceAccount
  name: csi-controller-sa
  namespace: default
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: csi-controller
spec:
  serviceName: csi-controller
  replicas: 1
  selector:
    matchLabels:
      app: csi-controller
  template:
    metadata:
      labels:
        app: csi-controller
    spec:
      serviceAccount: csi-controller-sa
      # iSCSI only the very latest Open-iSCSI supports namespaces
      hostNetwork: true
      # Required by multipath detach (some drivers clone volumes dd-ing)
      hostIPC: true
      # Pin the controller to node0, where we created the LVM backend
      containers:
      - name: external-provisioner
        # image: quay.io/k8scsi/csi-provisioner:v0.2.1
        #image: quay.io/k8scsi/csi-provisioner:v0.3.1
        image: cr-hn-1.vccloud.vn/17a1c3c952c84b3e84a82ddd48364938/csi-provisioner:v1.6.0
        args:
        - --v=5
        - --provisioner=ember-csi.io
        - --csi-address=/csi-data/csi.sock
        volumeMounts:
        - mountPath: /csi-data
          name: socket-dir
      - name: external-attacher
        # image: quay.io/k8scsi/csi-attacher:v0.2.0
        #image: quay.io/k8scsi/csi-attacher:v0.3.0
        image: cr-hn-1.vccloud.vn/17a1c3c952c84b3e84a82ddd48364938/csi-attacher:v2.2.0
        args:
        - --v=5
        - --csi-address=/csi-data/csi.sock
        # If we were using attacher >= 0.4
        # - --timeout=120s
        volumeMounts:
        - mountPath: /csi-data
          name: socket-dir
      - name: csi-driver
        image: embercsi/ember-csi:master
        imagePullPolicy: Always
        securityContext:
          privileged: true
          allowPrivilegeEscalation: true
        env:
        - name: PYTHONUNBUFFERED
          value: '0'
        - name: CSI_ENDPOINT
          value: unix:///csi-data/csi.sock
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: X_CSI_SPEC_VERSION
          # value: v0.2
          value: v1.1
        - name: CSI_MODE
          value: controller
        - name: X_CSI_PERSISTENCE_CONFIG
          value: '{"storage":"crd"}'
        - name: X_CSI_BACKEND_CONFIG
          value: '{"name":"fujitsu-dx","multipath":true,"driver":"FJDXFC","protocol":"fc","ip":"172.20.11.9","user":"root","password":"root","poolname":"pool1","snappoolname":""}'
        volumeMounts:
        - name: socket-dir
          mountPath: /csi-data
        - name: cinder-fujitsu
          mountPath: /etc/cinder/cinder_fujitsu_eternus_dx.xml
          mountPropagation: HostToContainer
          #- name: iscsi-dir
          #- mountPath: /etc/iscsi
          #- mountPropagation: Bidirectional
          #- name: dev-dir
          #- mountPath: /dev
          #- mountPropagation: Bidirectional
          #- name: lvm-dir
          #- mountPath: /etc/lvm
          #- mountPropagation: Bidirectional
          #- name: lvm-lock
          #- mountPath: /var/lock/lvm
          #- mountPropagation: Bidirectional
         #- name: multipath-dir
          #- mountPath: /etc/multipath
          #- mountPropagation: Bidirectional
         #- name: multipath-conf
          #- mountPath: /etc/multipath.conf
          #- mountPropagation: HostToContainer
         #- name: modules-dir
          #- mountPath: /lib/modules
          #- mountPropagation: HostToContainer
          #- name: localtime
          #- mountPath: /etc/localtime
          #- mountPropagation: HostToContainer
          # - name: udev-data
          # - mountPath: /run/udev
          # - mountPropagation: HostToContainer
        # # - Required to preserve the node targets between restarts
         # - name: iscsi-info
          # - mountPath: /var/lib/iscsi
          # - mountPropagation: Bidirectional
        # In a real deployment we should be mounting container's
        # /var/lib-ember-csi on the host
      - name: csc
        image: akrog/csc:v0.2.0
        command: ["tail"]
        args: ["-f", "/dev/null"]
        env:
          - name: CSI_ENDPOINT
            value: unix:///csi-data/csi.sock
        volumeMounts:
          - name: socket-dir
            mountPath: /csi-data
      volumes:
      - name: socket-dir
        emptyDir:
      - name: cinder-fujitsu
        hostPath:
          path: /etc/cinder/cinder_fujitsu_eternus_dx.xml
      # Some backends do create volume from snapshot by attaching and dd-ing
      #- name: iscsi-dir
      #  hostPath:
      #    path: /etc/iscsi
      #    type: Directory
      #- name: dev-dir
      #  hostPath:
      #    path: /dev
      #- name: lvm-dir
      #  hostPath:
      #    path: /etc/lvm
      #    type: Directory
      #- name: lvm-lock
      #  hostPath:
      #    path: /var/lock/lvm
      #- name: multipath-dir
      #  hostPath:
      #    path: /etc/multipath
      #- name: multipath-conf
      #  hostPath:
      #    path: /etc/multipath.conf
      #- name: modules-dir
      #  hostPath:
      #    path: /lib/modules
      #    #- name: localtime
      #    #ho- nastPath:
      #    #- napath: /etc/localtime
      #- name: udev-data
      #  hostPath:
      #    path: /run/udev
      #- name: iscsi-info
      #  hostPath:
      #    path: /var/lib/iscsi
